plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '3.2.0'
}

group = 'com.tinydemo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testIntegrationImplementation.extendsFrom testImplementation
    testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly
    testRegressionImplementation.extendsFrom testImplementation
    testRegressionRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation libs.mybatis.spring.boot.starter
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation libs.mybatis.spring.boot.starter.test
    testImplementation 'org.testcontainers:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    testIntegration {
        java.srcDir "$projectDir/src/testIntegration/java"
//        resources.srcDir "$projectDir/src/testIntegration/resources"
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
    testRegression {
        java.srcDir "$projectDir/src/testRegression/java"
//        resources.srcDir "$projectDir/src/testRegression/resources"
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

bootJar {
    archiveFileName.set('app.jar')
    launchScript {
        properties("mode": "run")
    }
    manifest {
        attributes(
                'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('test') {
    useJUnitPlatform {
        excludeTags "integration", "regression"
    }
}


tasks.register('testIntegration', Test) {
    useJUnitPlatform() {
        includeTags "integration"
    }
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
    shouldRunAfter test
    systemProperty "spring.config.name", "application-integration"
    systemProperty "spring.config.additional-location", "classpath:/"
}

tasks.register('testRegression', Test) {
    useJUnitPlatform() {
        includeTags "regression"
    }
    testClassesDirs = sourceSets.testRegression.output.classesDirs
    classpath = sourceSets.testRegression.runtimeClasspath
    shouldRunAfter testIntegration
    systemProperty "spring.config.name", "application-regression"
    systemProperty "spring.config.additional-location", "classpath:/"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    dependsOn test, testIntegration
}

testlogger {
    theme 'mocha'
    showExceptions true
    showStackTraces true
}

tasks.named('check') {
    dependsOn jacocoTestReport
}

tasks.withType(Test).configureEach {
    maxParallelForks = 4  // 每个测试任务并行进程数
    forkEvery = 100        // 每执行 100 个测试用例后重启 JVM
    outputs.cacheIf { true }  // 允许缓存测试结果
}

